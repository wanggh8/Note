{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction1. Introduction "},"macOS/":{"url":"macOS/","title":"macOS","keywords":"","body":"1. Introduction1. Introduction "},"macOS/App-Sandbox.html":{"url":"macOS/App-Sandbox.html","title":"App Sandbox","summary":"macOS","keywords":"","body":""},"macOS/NSViewController.html":{"url":"macOS/NSViewController.html","title":"NSViewController","summary":"macOS","keywords":"","body":"在 macOS 10.10 及更高版本中，NSViewController 使用初始化方法 [[MyViewController alloc] init] 时，调用 loadView 将加载与 NSViewController 同名的 Nib 文件，将 Nib 文件实例化视图连接到视图控制器的视图属性。如果不存在 Nib 文件，会触发运行时崩溃： -[NSNib _initWithNibNamed:bundle:options:] could not load the nibName: NSViewController in bundle (null). "},"Git/":{"url":"Git/","title":"Git","keywords":"","body":"1. Introduction1. Introduction "},"Git/GitManual.html":{"url":"Git/GitManual.html","title":"GitManual","summary":"Git Manual","keywords":"","body":"1. Git Manual1.1. Git 简介1. Git Manual 1.1. Git 简介 Git 是目前世界上最先进的分布式版本控制系统。SVN 是集中式版本控制系统，版本库是集中放在中央服务器的。Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库。Git 配置用户标识： $ git config --global user.name \"Gh.Wang\" $ git config --global user.email \"1299927852@qq.com\" 本地基本使用 选择一个空目录，路径最好不包含中文，然后使用 git init 可以把这个目录变成Git可以管理的仓库，只会可以用 git add 命令将文件添加到仓库暂存区中，然后可以用 git commit 提交到版本库分支中 $ git add readme.txt $ git commit -m \"wrote a readme file\" 之后可以使用给git status 查看结果，当前是否有新的更改以及更改是否提交，如果被修改了可以用git diff查看文件修改前后的不同，选择是否要保留更改。如果选择放弃更改使用命令git checkout -- file可以丢弃工作区的修改，同时命令git reset HEAD 可以把暂存区的修改撤销掉，重新放回工作区。git log命令可以显示从最近到最远的提交日志，可以加上--pretty=oneline让信息在一行显示。之后进行版本回退有两种 方式 用HEAD表示当前版本，也就是最新的提交版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，以此类推，如果较多可以用HEAD~n，然后使用命令$ git reset --hard HEAD^回退。 直接使用$ git reset --hard 加上版本号，一般输入版本号的前几位就可以了。 在版本回溯中，git使用指针，将指针头指向真正应用的版本，当需要更改的时候只需要移动指针就可以了。 如果要删除某个文件的话就直接使用rm命令,不过此时并没有在版本库中删除，如果确实要从版本库中删除需要使用 $ git rm test.txt $ git commit -m \"remove test.txt\" 如果误删，则可以使用git checkout -- test.txt恢复到最新版本。 分支与标签 创建并切换分支:$ git checkout -b name 查看当前分支:git branch 切换分支:git checkout name 合并指定分支到当前分支:git merge 删除分支:git branch -d 新建一个标签:git tag 指定标签信息:git tag -a -m \"blablabla...\" 查看所有标签:git tag 远程仓库 首先需要创建SSH Key，使用命令： $ ssh-keygen -t rsa -C \"1299927852@qq.com\" 可以在用户目录下看到.ssh目录，目录中有id_rsa和id_rsa.pub两个文件，其中第一个是私钥，第二个是公钥，我们一般用的就是公钥。在github的setting的ssh keys界面加入自己的公钥，之后电脑就可以往github上推送了。 添加远程库，使github上的远程库与本地库同步，使用命令： $ git remote add origin git@gitee.com:wanggh8/resume.git 第一次可以使用git push -u origin master命令，实际上是把当前分支master推送到远程。之后可以直接使用命令git push origin master 从远程库克隆时，使用git pull git@gitee.com:wanggh8/resume.git 使用码云时大部分只需要将github替换成gitee就可以了，可以同时关联两个远程库，但名字应该不同。 更新 Git 缓存 更新缓存 git rm -r --cached . "},"Git/Git-LFS.html":{"url":"Git/Git-LFS.html","title":"Git LFS","summary":"Git LFS","keywords":"","body":"1.1. 使用目的1.2. 安装1.2.1. Linux1.2.2. Mac1.2.3. Windows1.3. 使用Git LFS 是 Github 开发的一个 Git 的扩展，用于实现 Git 对大文件的支持 1.1. 使用目的 在游戏开发过程中,设计资源占用了很大一部分空间. 像 png、psd 等文件是二进制 (blob) 的,体积也很庞大。但 git 的 diff/patch 等是基于文件行的。对于二进制文件来说， git 需要存储每次 commit 的改动。每次当二进制文件修改，发生变化的时候. 都会产生额外的提交量，导致 clone 和 pull 的数据量大增，在线仓库的体积也会迅速增长。 LFS (Large File Storage) 就是为了解决这一问题而产生的工具。它将你所标记的大文件保存至另外的仓库，而在主仓库仅保留其轻量级指针。那么在你检出版本时，根据指针的变化情况下更新对应的大文件，而不是在本地保存所有版本的大文件。 1.2. 安装 注意：安装 Git LFS 需要 Git 的版本不低于 1.8.5 1.2.1. Linux curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash ` sudo apt-get install git-lfs git lfs install 1.2.2. Mac brew install git-lfs git lfs install 1.2.3. Windows 下载安装 windows installer 运行 windows installer 在命令行执行 git lfs install 1.3. 使用 执行 git lfs install 开启lfs功能 使用 git lfs track 命令进行大文件追踪 例如 git lfs track \"*.png\" 追踪所有后缀为 png 的文件 使用 git lfs track 查看现有的文件追踪模式 提交代码需要将 .gitattributes 文件提交至仓库. 它保存了文件的追踪记录 提交后运行 git lfs ls-files 可以显示当前跟踪的文件列表 将代码 push 到远程仓库后，LFS 跟踪的文件会以『Git LFS』的形式显示: clone 时 使用 git clone 或 git lfs clone 均可 "},"Mac/":{"url":"Mac/","title":"Mac","keywords":"","body":"1. Introduction1. Introduction "}}